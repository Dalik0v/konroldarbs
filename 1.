1.
это основная структура данных  используемая для организации элементов в последовательном порядке. В отличие от массивов, связанные списки состоят из элементов, называемых "узлами", которые не хранятся в смежных ячейках памяти. Каждый узел содержит две части: данные,указатель(сыллка) 
Связанные списки могут использоваться во многих приложениях, таких как реализация очередей, стеков, графов, и в сценариях, где выделение памяти непредсказуемо и динамично.
2.
Преимущества и недостатки связанных списков
Преимущества:
Динамический размер
Простое добавление и удаление элементов
Недостатки:
Прямой доступ к элементу по индексу отсутствует (только последовательный доступ)
Дополнительная память на хранение указателей в узлах
3.
Применения связанных списков
Связанные списки полезны, когда вам нужно выполнить много операций вставки и удаления, и когда вы не знаете, сколько элементов будет в данных
4.
Стек — это структура данных
- **Push (Добавить)**: добавление элемента на вершину стека.
- **Pop (Удалить)**: удаление элемента с вершины стека.
- **Top** или **Peek (Просмотреть)**: чтение элемента на вершине стека без его удаления.
- **IsEmpty (Пуст ли)**: проверка стека на пустоту.
- **Size (Размер)**: получение количества элементов в стеке.
Стек может быть реализован различными способами, включая использование массивов, связанных списков и даже коллекций с поддержкой LIFO.
5.
Стек — это простая структура данных, которая работает очень быстро. Ты можешь легко добавлять и удалять элементы. Это особенно полезно для управления вызовами функций или при анализе сложных выражений. Очень удобно и практично. Стек также способствует лучшей организации данных в памяти, что ускоряет доступ к ним.
6.
Стек ограничивает доступ к элементам, позволяя работать только с верхним элементом. Если стек реализован с фиксированным размером, это может привести к проблемам с переполнением. Также, если нужен доступ к элементам, которые не находятся на вершине, стек не будет эффективен.
7.
Очередь — это структура данных, где первый элемент, который добавили, будет первым и обработанным. Это как стоять в обычной очереди: кто первый пришел, тот и первый уйдет. В очереди можно делать такие действия:

- **Добавить элемент**: кладем элемент в конец очереди.
- **Удалить элемент**: убираем первый элемент из начала очереди.
- **Посмотреть первый элемент**: проверяем, кто стоит в начале очереди, не удаляя его.
- **Проверить, пуста ли очередь**: смотрим, есть ли в очереди элементы.
- **Узнать размер**: узнаем, сколько элементов в очереди.
8.
Плюсы очереди: обеспечивает справедливую обработку элементов по порядку их поступления, подходит для задач, требующих поддержания порядка, таких как печать документов или управление процессами.
9.
Минусы: ограниченный доступ только к началу и концу, что делает сложным доступ к элементам в середине очереди.
2часть
1.linkedList





